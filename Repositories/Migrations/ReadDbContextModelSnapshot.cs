// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.DbContexts;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    partial class ReadDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentDealer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentPayerNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentTurnCards")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CurrentTurnTimeout")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastTurnCards")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CoincheGames");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoinchePlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cards")
                        .HasMaxLength(23)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayableCards")
                        .HasMaxLength(23)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("CoinchePlayers");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheTake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentFold")
                        .HasMaxLength(23)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CurrentPlayerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentPlayerPlayableCards")
                        .HasMaxLength(23)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousFold")
                        .HasMaxLength(23)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPlayerId");

                    b.HasIndex("GameId");

                    b.ToTable("CoincheTakes");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("CoincheTeams");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoinchePlayer", b =>
                {
                    b.HasOne("Domain.Entities.ReadEntities.CoincheTeam", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheTake", b =>
                {
                    b.HasOne("Domain.Entities.ReadEntities.CoinchePlayer", "CurrentPlayer")
                        .WithMany("Takes")
                        .HasForeignKey("CurrentPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ReadEntities.CoincheGame", "Game")
                        .WithMany("Takes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurrentPlayer");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheTeam", b =>
                {
                    b.HasOne("Domain.Entities.ReadEntities.CoincheGame", "Game")
                        .WithMany("Teams")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheGame", b =>
                {
                    b.Navigation("Takes");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoinchePlayer", b =>
                {
                    b.Navigation("Takes");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheTeam", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
