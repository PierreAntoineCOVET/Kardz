// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.DbContexts;

#nullable disable

namespace Repositories.Migrations.ReadDb
{
    [DbContext(typeof(ReadDbContext))]
    [Migration("20220402001114_UpdateTurnTimeoutManagement")]
    partial class UpdateTurnTimeoutManagement
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentCards")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("CurrentDealer")
                        .HasColumnType("int");

                    b.Property<int>("CurrentPayerTurn")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CurrentTurnTimeout")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("CoincheGames");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoinchePlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cards")
                        .HasMaxLength(23)
                        .IsUnicode(false)
                        .HasColumnType("varchar(23)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("TeamNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId", "TeamNumber");

                    b.ToTable("CoinchePlayers");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheTeam", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("GameId", "Number");

                    b.ToTable("CoincheTeams");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoinchePlayer", b =>
                {
                    b.HasOne("Domain.Entities.ReadEntities.CoincheTeam", "Team")
                        .WithMany("Players")
                        .HasForeignKey("GameId", "TeamNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheTeam", b =>
                {
                    b.HasOne("Domain.Entities.ReadEntities.CoincheGame", "Game")
                        .WithMany("Teams")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheGame", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Domain.Entities.ReadEntities.CoincheTeam", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
